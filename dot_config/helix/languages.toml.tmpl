# Default configuration: https://github.com/helix-editor/helix/blob/master/languages.toml

{{- $catalog := joinPath .chezmoi.homeDir ".cache" "schemastore" "catalog.json" | include | fromJson }}

[[language]]
name = "astro"
language-servers = ["astro-ls", "efm-langserver", "scls"]

[[language]]
name = "bash"
formatter = { command = "shfmt", args = ["-i", "2", "-ci"]} # Google's Style
language-servers = ["bash-language-server", "typos", "efm-langserver", "scls"]

[[language]]
name = "css"
formatter = { command = "pnpm", args = ["--silent", "dlx", "prettier", "--parser", "css"] }
language-servers = ["vscode-css-language-server", "stylelint-lsp", "typos", "efm-langserver", "scls"]

[[language]]
name = "dockerfile"
language-servers = [ "docker-langserver", "scls" ]

[[language]]
name = "docker-compose"
language-servers = [ "docker-compose-langserver", "yaml-language-server", "scls" ]

[[language]]
name = "fish"
language-servers = ["efm-langserver", "typos", "scls"]

{{- if eq .chezmoi.os "windows" }}
[[grammar]]
name = "gemini"
source = { git = "https://git.sr.ht/~nbsp/tree-sitter-gemini", rev = "3cc5e4bdf572d5df4277fc2e54d6299bd59a54b3" }
{{- end }}

[[language]]
name = "go"
scope = "source.go"
language-servers = ["gopls", "golangci-lint-langserver", "efm-langserver", "scls"]

[[language]]
name = "hjson"
scope = "source.hjson"
injection-regex = "hson"
file-types = ["hjson"]
indent = { tab-width = 4, unit = "  " }
language-servers = ["scls"]
roots = []

[[grammar]]
name = "hjson"
source = { git = "https://github.com/winston0410/tree-sitter-hjson", rev = "02fa3b79b3ff9a296066da6277adfc3f26cbc9e0" }

[[language]]
name = "html"
formatter = { command = "pnpm", args = ["--silent", "dlx", "prettier", "--parser", "html"] }
language-servers = ["vscode-html-language-server", "tailwindcss-ls", "efm-langserver", "scls"]

[[language]]
name = "ini"
file-types = [
  "ini",
  # Systemd unit files
  "service",
  "automount",
  "desktop",
  "device",
  "mount",
  "nspawn",
  "path",
  "scope",
  "slice",
  "socket",
  "swap",
  "target",
  "timer",
  { glob = "systemd/**/*.conf" },
  # Podman quadlets
  "container",
  "volume",
  "kube",
  "network",
  { glob = ".editorconfig" },
  { glob = ".npmrc" },
  { glob = "hgrc" },
  { glob = "npmrc" },
  { glob = "rclone.conf" },
  "properties",
  "cfg",
  "directory",

  { glob = ".aws/config" }
]

[[language]]
name = "javascript"
roots = ["package.json"]
language-servers = [
  "vtsls",
  { name = "biome-lsp", except-features = [ "format" ] },
  "vscode-eslint-language-server",
  "typos",
  "efm-langserver",
  "scls"
]

[[language]]
name = "json"
language-servers = [
  "vscode-json-language-server",
  { name = "biome-lsp", except-features = [ "format" ] },
  "typos",
  "efm-langserver",
  "scls"
]

[[language]]
name = "jsx"
roots = ["package.json"]
language-servers = [
  "vtsls",
  "tailwindcss-ls",
  { name = "biome-lsp", except-features = [ "format" ] },
  "vscode-eslint-language-server",
  "typos",
  "efm-langserver",
  "scls"
]

[[language]]
name = "kdl"
language-servers = ["efm-langserver"]

[[language]]
name = "markdown"
language-servers = ["marksman", "typos", "efm-langserver", "scls", "obsidian-lsp"]
auto-format = true
formatter = { command = "pnpm", args = ["--silent", "dlx", "prettier", "--parser", "markdown"] }

[[language]]
name = "python"
language-servers = ["pylsp", "pyright-langserver", "ruff", "typos", "efm-langserver", "scls"]
formatter = { command = "black", args = ["--quiet", "-"] }
auto-format = true
roots = ["pyproject.toml"]

[[language]]
name = "rust"
language-servers = [ "rust-analyzer", "typos", "scls" ]

[[language]]
name = "scss"
formatter = { command = "pnpm", args = ["--silent", "dlx", "prettier", "--parser", "css"] }
language-servers = ["vscode-css-language-server", "stylelint-lsp-scss", "efm-langserver", "scls"]

[[language]]
name = "toml"
language-servers = ["taplo", "typos", "efm-langserver", "scls"]
formatter = { command = "taplo", args = ["format", "-"]}

[[language]]
name = "tsx"
roots = ["package.json", "tsconfig.json"]
language-servers = [
  { name = "vtsls", except-features = ["format"] },
  "tailwindcss-ls",
  { name = "biome-lsp", except-features = [ "format" ] },
  "vscode-eslint-language-server",
  "typos",
  "efm-langserver",
  "scls"
]

[[language]]
name = "typescript"
roots = ["package.json", "tsconfig.json"]
language-servers = [
  { name = "vtsls", except-features = ["format"]},
  { name = "biome-lsp", except-features = [ "format" ] },
  "vscode-eslint-language-server",
  "typos",
  "efm-langserver",
  "scls"
]

[[language]]
name = "yaml"
language-servers = ["yaml-language-server", "typos", "efm-langserver", "scls"]

{{- if eq .chezmoi.os "windows" }}
[[language]]
name = "powershell"
scope = "source.ps1"
file-types = [ "ps1", "psm1", "psd1" ]
comment-token = '#'
indent = { tab-width = 4, unit = "    " }
language-servers = ["powershell-editor-services", "scls"]
{{- end }}

[language-server]
deno = { command = "deno", args = ["lsp"] }
efm-langserver = { command = "efm-langserver" }
{{- $powershell_editor_service := findExecutable "powershell-editor-services" (list (joinPath .chezmoi.homeDir ".local" "share"
"powershell-editor-services")) -}}
{{- if $powershell_editor_service }}
powershell-editor-services = { command = {{ $powershell_editor_service | quote }} }
{{- end }}
{{- if lookPath "harper-ls" }}
# Harper: An English grammar checker for developers
# https://writewithharper.com/
harper-ls = { command = "harper-ls", args = ["--stdio"] }
{{- end }}

[language-server.astro-ls]
command = "astro-ls"
args =["--stdio"]

[language-server.biome-lsp]
command = "biome"
args =["lsp-proxy"]
required-root-patterns = ["biome.json", "biome.jsonc"]

[language-server.vscode-eslint-language-server]
required-root-patterns = [
  ".eslintrc.js",
  ".eslintrc.cjs",
  "eslint.config.js",
  "eslint.config.mjs",
  "eslint.config.cjs",
  "eslint.config.ts",
  "eslint.config.mts",
  "eslint.config.cts"
]

[language-server.obsidian-lsp]
command = "obsidian-lsp"
args =["--stdio"]

[language-server.pylsp.config.plugins]
autopep8 = { enabled = false }
flake8 = { enabled = false }
mccabe = { enabled = false }
pycodestyle = { enabled = false }
pydocstyle = { enabled = false }
pyflakes = { enabled = false }
pylint = { enabled = false }
rope_autoimport = { enabled = true }
rope_completion = { enabled = true }
yapf = { enabled = false }
{{- if eq .chezmoi.os "windows" }}
ruff = { enabled = true }
{{- end }}

[language-server.pyright-langserver]
command = "pyright-langserver"
args = ["--stdio"]

[language-server.pyright-langserver.config.python.analysis]
autoImportCompletions = true
autoSearchPaths = true
reportMissingImports = true
typeCheckingMode = "strict"
useLibraryCodeForTypes = true

[language-server.ruff]
command = "ruff"
args = ["server"]

[language-server.ruff.config.settings]
run = "onSave"

{{- if lookPath "clippy-driver"}}
[language-server.rust-analyzer.config.check]
command = "clippy"
{{- end }}

[language-server.rust-analyzer.config.completion.autoimport]
enable = true

{{- if lookPath "typos-lsp" }}
[language-server.typos]
# typos-lsp must be on your PATH, or otherwise change this to an absolute path to typos-lsp
command = "typos-lsp"
# Logging level of the language server. Defaults to error.
# Run with helix -v to output LSP logs to the editor log (:log-open)
environment = {"RUST_LOG" = "error"}
# Custom config. Used together with a config file found in the workspace or its parents,
# taking precedence for settings declared in both. Equivalent to the typos `--config` cli argument.
#  config.config = "~/code/typos-lsp/crates/typos-lsp/tests/typos.toml"
# How typos are rendered in the editor, can be one of an Error, Warning, Info or Hint.
# Defaults to Warning.
config.diagnosticSeverity = "Info"
{{- end }}

{{- if lookPath "simple-completion-language-server" }}
# https://github.com/estin/simple-completion-language-server
# $ cargo install --git https://github.com/estin/simple-completion-language-server.git
[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 100           # set max completion results len for each group: words, snippets, unicode-input
feature_words = true                 # enable completion by word
feature_snippets = true              # enable snippets
snippets_first = true                # completions will return before snippets by default
snippets_inline_by_word_tail = false # suggest snippets by WORD tail, for example text `xsq|` become `x^2|` when snippet `sq` has body `^2`
feature_unicode_input = true         # enable "unicode input"
feature_paths = false                # enable path completion
feature_citations = false            # enable citation completion (only on `citation` feature enabled)
{{- end }}

[language-server.stylelint-lsp]
command = "stylelint-lsp"
args = ["--stdio"]

[language-server.stylelint-lsp-scss]
command = "stylelint-lsp-scss"
args = ["--stdio"]

[language-server.vtsls]
command = "vtsls"
args = ["--stdio"]

[language-server.vtsls.config]

[language-server.vtsls.config.vtsls]
autoUseWorkspaceTsdk = true

[language-server.vtsls.config.javascript.inlayHints]
parameterNames = { enabled = 'all' }
parameterTypes = { enabled = true }
variableTypes = { enabled = true }
propertyDeclarationTypes = { enabled = true }
functionLikeReturnTypes = { enabled = true }
enumMemberValues = { enabled = true }

[language-server.vtsls.config.typescript.inlayHints]
parameterNames = { enabled = 'all' }
parameterTypes = { enabled = true }
variableTypes = { enabled = true }
propertyDeclarationTypes = { enabled = true }
functionLikeReturnTypes = { enabled = true }
enumMemberValues = { enabled = true }

[language-server.vscode-json-language-server.config.json]
format = { enable = true }

{{ slice ( $catalog | jq "[.schemas[] | select(.fileMatch | any(endswith(\"json\")))?] | {\"language-server\": {\"vscode-json-language-server\": {config: {json: {schemas: .}}}}}" | toToml | splitList "\n") 5 | join "\n" -}}

[language-server.aws-lsp-yaml]
command = "aws-lsp-yaml"
args = ["--stdio"]

[language-server.aws-lsp-yaml.config.yaml]
format = { enable = true }

{{ slice ( $catalog | jq "[.schemas[] | select(.fileMatch | any(endswith(\"yaml\") or endswith(\"yml\")))? ] | map({(.url): (.fileMatch)}) | {\"language-server\": {\"aws-lsp-yaml\": {config: {yaml: {schemas: .}}}}}" | toToml | splitList "\n") 5 | join "\n" -}}

[language-server.yaml-language-server.config.yaml]
format = { enable = true }
customTags = [
  '!And sequence',
  '!Base64',
  '!Cidr sequence',
  '!Equals sequence',
  '!FindInMap sequence',
  '!Fn',
  '!GetAZs',
  '!GetAtt',
  '!If sequence',
  '!ImportValue',
  '!Join sequence',
  '!Not sequence',
  '!Or sequence',
  '!Ref',
  '!Select sequence',
  '!Split sequence',
  '!Sub'
]

{{ slice ( $catalog | jq "[.schemas[] | select(.fileMatch | any(endswith(\"yaml\") or endswith(\"yml\")))? ] | map({(.url): (.fileMatch)}) | {\"language-server\": {\"yaml-language-server\": {config: {yaml: {schemas: .}}}}}" | toToml | splitList "\n") 5 | join "\n" -}}
