# Default configuration: https://github.com/helix-editor/helix/blob/master/languages.toml

{{- $catalog := output "curl" "-sJL" "https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/api/json/catalog.json" | fromJson }}

[[language]]
name = "astro"
language-servers = ["astro-ls", "efm-langserver", "buffer-ls"]

[[language]]
name = "bash"
formatter = { command = "shfmt", args = ["-i", "2", "-ci"]} # Google's Style
language-servers = ["bash-language-server", "efm-langserver", "buffer-ls"]

[[language]]
name = "css"
formatter = { command = "pnpm", args = ["--silent", "dlx", "prettier", "--parser", "css"] }
language-servers = ["vscode-css-language-server", "stylelint-lsp", "efm-langserver", "buffer-ls"]

[[language]]
name = "fish"
formatter = { command = "fish_indent" }
auto-format = true
language-servers = ["efm-langserver", "buffer-ls"]

{{ if eq .chezmoi.os "windows" -}}
[[grammar]]
name = "gemini"
source = { git = "https://git.sr.ht/~nbsp/tree-sitter-gemini", rev = "3cc5e4bdf572d5df4277fc2e54d6299bd59a54b3" }
{{- end }}

[[language]]
name = "go"
scope = "source.go"
language-servers = ["gopls", "golangci-lint-langserver", "efm-langserver", "buffer-ls"]

[[language]]
name = "hjson"
scope = "source.hjson"
injection-regex = "hson"
file-types = ["hjson"]
indent = { tab-width = 4, unit = "  " }
language-servers = ["buffer-ls"]
roots = []

[[grammar]]
name = "hjson"
source = { git = "https://github.com/winston0410/tree-sitter-hjson", rev = "02fa3b79b3ff9a296066da6277adfc3f26cbc9e0" }

[[language]]
name = "html"
formatter = { command = "pnpm", args = ["--silent", "dlx", "prettier", "--parser", "html"] }
language-servers = ["vscode-html-language-server", "tailwindcss-ls", "efm-langserver", "buffer-ls"]

[[language]]
name = "javascript"
language-servers = ["typescript-language-server", "biome-ls", "efm-langserver", "buffer-ls"]

[[language]]
name = "json"
language-servers = ["vscode-json-language-server", "biome-ls", "efm-langserver", "buffer-ls"]

[[language]]
name = "jsx"
language-servers = ["typescript-language-server", "tailwindcss-ls", "biome-ls", "efm-langserver", "buffer-ls"]

[[language]]
name = "kdl"
language-servers = ["efm-langserver"]

[[language]]
name = "markdown"
language-servers = ["marksman", "efm-langserver", "buffer-ls", "obsidian-lsp"]
auto-format = true
formatter = { command = "pnpm", args = ["--silent", "dlx", "prettier", "--parser", "markdown"] }

[[language]]
name = "PowerShell"
language-id = "powershell"
scope = "source.ps1"
file-types = ["ps1", "psm1", "psd1"]
shebangs = ["pwsh"]
roots = []
comment-token = "#"
indent = { tab-width = 4, unit = "    " }
language-servers = ["powershell-langserver", "buffer-ls"]

[[grammar]]
name = "PowerShell"
source = { git = "https://github.com/kiennq/tree-sitter-PowerShell", rev = "ecb861958a94d5e228af02fe702f076b8bcc8d3e" }

[[language]]
name = "python"
language-servers = ["pylsp", "pyright-langserver", "ruff-lsp", "efm-langserver", "buffer-ls"]
formatter = { command = "black", args = ["--quiet", "-"] }
auto-format = true
roots = ["pyproject.toml"]

[[language]]
name = "scss"
formatter = { command = "pnpm", args = ["--silent", "dlx", "prettier", "--parser", "css"] }
language-servers = ["vscode-css-language-server", "stylelint-lsp-scss", "efm-langserver", "buffer-ls"]

[[language]]
name = "toml"
language-servers = ["taplo-lsp", "efm-langserver", "buffer-ls"]
formatter = { command = "taplo-lsp", args = ["format", "-"]}

[[language]]
name = "tsx"
language-servers = ["typescript-language-server", "tailwindcss-ls", "biome-ls", "efm-langserver", "buffer-ls"]

[[language]]
name = "typescript"
language-servers = ["typescript-language-server", "biome-ls", "efm-langserver", "buffer-ls"]

[[language]]
name = "yaml"
language-servers = ["yaml-language-server", "efm-langserver", "buffer-ls"]

[language-server]
deno = { command = "deno", args = ["lsp"] }
efm-langserver = { command = "efm-langserver" }
powershell-langserver = { command = {{ findExecutable "powershell-editor-services" (list (joinPath .chezmoi.homeDir ".local" "share" "powershell-editor-services")) | quote }} }

[language-server.tailwindcss-ls]
command = {{ lookPath "pnpm" | quote }}
args =["--silent", "dlx", "@tailwindcss/language-server", "--stdio"]

[language-server.buffer-ls]
{{ if lookPath "simple-completion-language-server" -}}
# https://github.com/estin/simple-completion-language-server
# $ cargo install --git https://github.com/estin/simple-completion-language-server.git
command = "simple-completion-language-server"
config = { max_completion_items = 20, snippets_first = false }
{{- else -}}
# https://github.com/metafates/buffer-language-server
# cargo install buffer-language-server
command = "buffer-language-server"
{{- end }}

[language-server.astro-ls]
command = {{ lookPath "pnpm" | quote }}
args =["--silent", "dlx", "@astrojs/language-server", "--stdio"]

[language-server.bash-language-server]
command = {{ lookPath "pnpm" | quote }}
args = ["--silent", "dlx", "bash-language-server", "start"]

[language-server.biome-ls]
command = {{ lookPath "pnpm" | quote }}
args = ["--silent", "dlx", "@biomejs/biome", "lsp-proxy", '--config-path={{- joinPath .chezmoi.homeDir ".config" "biome.json" | quote -}}']

[language-server.docker-langserver]
command = {{ lookPath "pnpm" | quote }}
args = ["--silent", "dlx", "dockerfile-language-server-nodejs", "--stdio"]

[language-server.graphql-language-service]
command = {{ lookPath "pnpm" | quote }}
args = ["--silent", "dlx", "graphql-language-service-cli", "server", "-m", "stream"]

[language-server.obsidian-lsp]
command = {{ lookPath "pnpm" | quote }}
args =["--silent", "dlx", "obsidian-lsp", "--stdio"]

[language-server.pylsp]
command = {{ joinPath .chezmoi.homeDir ".local" "share" "python-lsp-server" "pylsp" | quote }}

[language-server.pylsp.config.plugins]
autopep8 = { enabled = false }
flake8 = { enabled = false }
mccabe = { enabled = false }
pycodestyle = { enabled = false }
pydocstyle = { enabled = false }
pyflakes = { enabled = false }
pylint = { enabled = false }
rope_autoimport = { enabled = true }
rope_completion = { enabled = true }
yapf = { enabled = false }
{{ if eq .chezmoi.os "windows" -}}
ruff = { enabled = true }
{{- end }}

[language-server.pyright-langserver]
command = {{ lookPath "pnpm" | quote }}
args = ["--silent", "--package=pyright", "dlx","pyright-langserver", "--stdio"]

[language-server.pyright-langserver.config.python.analysis]
autoImportCompletions = true
autoSearchPaths = true
reportMissingImports = true
typeCheckingMode = "strict"
useLibraryCodeForTypes = true

[language-server.ruff-lsp]
command = "ruff-lsp"
config = { settings = { run = "onSave" } }

[language-server.stylelint-lsp]
command = {{ lookPath "pnpm" | quote }}
args = ["--silent", "dlx", "stylelint-lsp", "--stdio"]

[language-server.stylelint-lsp-scss]
command = {{ lookPath "pnpm" | quote }}
args = ["--silent", "--package=stylelint-lsp", "--package=stylelint-config-standard-scss", "dlx", "stylelint-lsp", "--stdio"]

[language-server.taplo-lsp]
command = "taplo"
args = ["lsp", "stdio"]

[language-server.taplo-lsp.config]
activationStatus = true
taploConfig = 'taplo://taplo.toml'
taploConfigEnabled = true
semanticTokens = false
debug = false

[language-server.taplo-lsp.config.evenBetterToml.schema]
enabled = true
links = false
repositoryEnabled = true
repositoryUrl = "https://taplo.tamasfe.dev/schema_index.json"

[language-server.taplo-lsp.config.evenBetterToml.schema.associations]
'^(.*(/|\\)Cargo\.toml|Cargo\.toml)$' = "taplo://Cargo.toml"

[language-server.taplo-lsp.config.evenBetterToml.formatter]
alignEntries = false
alignComments = true
arrayTrailingComma = true
arrayAutoExpand = true
arrayAutoCollapse = true
compactArrays = true
compactInlineTables = false
compactEntries = false
columnWidth = 80
indentTables = false
indentEntries = false
indentString = {}
reorderKeys = true
allowedBlankLines = 2
trailingNewline = true
crlf = false

[language-server.taplo-lsp.config.evenBetterToml.actions]
ignoreDepracatedAssociations = false

[language-server.typescript-language-server]
command = {{ lookPath "pnpm" | quote }}
args = ["--silent", "dlx", "typescript-language-server", "--stdio"]

[language-server.vscode-css-language-server]
command = {{ lookPath "pnpm" | quote }}
args = ["--silent",  "--package=vscode-langservers-extracted", "dlx", "vscode-css-language-server", "--stdio"]

[language-server.vscode-eslint-language-server]
command = {{ lookPath "pnpm" | quote }}
args = ["--silent",  "--package=vscode-langservers-extracted", "dlx", "vscode-eslint-language-server", "--stdio"]

[language-server.vscode-html-language-server]
command = {{ lookPath "pnpm" | quote }}
args = ["--silent",  "--package=vscode-langservers-extracted", "dlx", "vscode-html-language-server", "--stdio"]

[language-server.vscode-json-language-server]
command = {{ lookPath "pnpm" | quote }}
args = ["--silent",  "--package=vscode-langservers-extracted", "dlx", "vscode-json-language-server", "--stdio"]

[language-server.vscode-json-language-server.config.json]
format = { enable = true }

{{ slice ( $catalog | jq "[.schemas[] | select(.fileMatch | any(endswith(\"json\")))?] | {\"language-server\": {\"vscode-json-language-server\": {config: {json: {schemas: .}}}}}" | toToml | splitList "\n") 5 | join "\n" -}}

[language-server.yaml-language-server]
command = {{ lookPath "pnpm" | quote }}
args = ["--silent", "dlx", "yaml-language-server", "--stdio"]

[language-server.yaml-language-server.config.yaml]
format = { enable = true }
customTags = [
  '!And sequence',
  '!Base64',
  '!Cidr sequence',
  '!Equals sequence',
  '!FindInMap sequence',
  '!Fn',
  '!GetAZs',
  '!GetAtt',
  '!If sequence',
  '!ImportValue',
  '!Join sequence',
  '!Not sequence',
  '!Or sequence',
  '!Ref',
  '!Select sequence',
  '!Split sequence',
  '!Sub'
]

{{ slice ( $catalog | jq "[.schemas[] | select(.fileMatch | any(endswith(\"yaml\") or endswith(\"yml\")))? ] | map({(.url): (.fileMatch)}) | {\"language-server\": {\"yaml-language-server\": {config: {yaml: {schemas: .}}}}}" | toToml | splitList "\n") 5 | join "\n" -}}
