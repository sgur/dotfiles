[init]
	defaultBranch = main

[user]
	useConfigOnly = true

{{ if eq .chezmoi.os "windows" -}}
[core]
	quotepath = false
	fscache = true
	preloadindex = true
	autocrlf = false

[http]
	sslBackend = schannel
{{- end }}

{{ if or (lookPath "git-lfs") (and (eq .chezmoi.os "windows") (lookPath "git")) -}}
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
{{- end }}

[commit]
	template = {{ joinPath .chezmoi.homeDir ".config/git/commit_msg-copilot_prompt.txt" | quote }}

{{ if or (lookPath "git-credential-manager") (and (eq .chezmoi.os "windows") (lookPath "git")) -}}
[credential]
	helper =
	helper = manager
{{-  if and (lookPath "gpg") (lookPath "pass") (stat (joinPath .chezmoi.homeDir ".password-store")) }}
	credentialStore = gpg
{{-  end }}
[credential "https://dev.azure.com"]
	useHttpPath = true
{{- end }}

{{ if lookPath "aws" -}}
[credential "https://git-codecommit.*.amazonaws.com"]
	useHttpPath = true
	provider = generic
	helper =
	helper = !aws codecommit credential-helper $@
{{- end }}

[log]
	date = iso8601

[pull]
	ff = only

[push]
	default = simple
	useForceIfIncludes = true

[diff]
	algorithm = histogram
	tool = vimdiff

[merge]
	conflictstyle = diff3
	ff = only

{{ if lookPath "diffsitter" -}}
[diff]
	tool = diffsitter
[difftool]
	prompt = false
[difftool "diffsitter"]
	cmd = diffsitter "$LOCAL" "$REMOTE"
{{- end }}

{{ if (lookPath "difft") -}}
[diff]
	external = difft
	tool = difftastic
[difftool]
	prompt = false
[difftool "difftastic"]
	cmd = difft "$LOCAL" "$REMOTE"

{{- else if (lookPath "delta") -}}
[core]
	pager = delta --diff-so-fancy

[interactive]
	diffFilter = delta --color-only

[delta]
	# use n and N to move between diff sections
	navigate = true
	# set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
	light = false

[diff]
	colorMoved = default
{{- end }}

[difftool]
	prompt = false

[difftool "code"]
	cmd = code --wait --diff $LOCAL $REMOTE

[mergetool "code"]
	cmd = code --wait --merge $REMOTE $LOCAL $BASE $MERGED

{{ if eq .chezmoi.os "windows" -}}
[difftool "p4merge"]
	cmd = p4merge.exe \"$LOCAL\" \"$REMOTE\"

[mergetool "sourcetree"]
	cmd = p4merge.exe \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
	trustExitCode = true

[difftool "vs2019"]
	cmd = \"C:/Program Files (x86)/Microsoft Visual Studio/2019/Professional/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team Explorer/vsdiffmerge.exe\" \"$LOCAL\" \"$REMOTE\" //t
	keepBackup = false

[mergetool "vs2019"]
	cmd = \"C:/Program Files (x86)/Microsoft Visual Studio/2019/Professional/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team Explorer/vsdiffmerge.exe\" \"$REMOTE\" \"$LOCAL\" \"$BASE\" \"$MERGED\" //m
	keepBackup = false
	trustExitCode = true
{{- end }}

# http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
[alias]
	ctags = !.git/hooks/ctags

# https://gist.github.com/gnarf/5406589
# Usage
# git pr 4
# - Creates local branch pr/4 from the github upstream(if it exists) or origin remote and checks it out
# git pr 4 someremote
# - Creates local branch pr/4 from someremote remote and checks it out
# git pr-clean
# - Removes all pr/* branches from your local repo
[alias]
	pr = "!f() { git fetch --force --update-head-ok ${2:-$(git remote | grep ^upstream || echo origin)} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
	pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
	# for bitbucket/stash remotes
	spr = "!f() { git fetch --force --update-head-ok ${2:-$(git remote | grep ^upstream || echo origin)} refs/pull-requests/$1/from:pr/$1 && git checkout pr/$1; }; f"

# https://e-penguiner.com/remove-local-branches-not-on-remote/
[alias]
	# リモートブランチに存在しないかつマージ済みのブランチをすべて削除する
	prune-merged = "!git fetch --prune && git branch --merged | grep --invert-match '^*' | xargs -r git branch --delete"
	# リモートブランチに存在しないブランチをすべて削除する
	prune-all = "!git fetch --prune && git branch --verbose --verbose | grep ': gone]' | awk '{print $1}' | xargs -r git branch --delete --force"

# https://blog.scottnonnenberg.com/better-git-configuration/
[alias]
	chmod = "!f() { mode=$1; shift; git update-index --add --chmod=${mode} \"$*\"; }; f"

[alias]
	browse = "!f() { {{ if (and (eq .chezmoi.os "linux") (.chezmoi.kernel.osrelease | lower | contains "microsoft")) -}} /mnt/c/Windows/System32/rundll32.exe url.dll,FileProtocolHandler {{- else if (eq .chezmoi.os "windows") -}} c:/Windows/System32/rundll32.exe url.dll,FileProtocolHandler  {{- else if (eq .chezmoi.os "darwin") -}} open {{- else -}} xdg-open {{- end }} `git config --get remote.origin.url | sed -Ee 's#(git@|git://)#https://#' -e 's@(com|net):@\\1/@' -e's/\\.git$//'` | head -n1; }; f"

# git-gui tools
[gui]
	encoding = UTF-8
[guitool "rebase/continue"]
	cmd = git rebase --continue
[guitool "rebase/skip"]
	cmd = git rebase --skip
[guitool "rebase/abort"]
	cmd = git rebase --abort
[guitool "clean/00listup"]
	cmd = git clean -n
[guitool "clean/99do"]
	cmd = git clean -f
[guitool "vim"]
	cmd = gvim --servername GIT_GUI --remote-tab-silent $FILENAME
	noconsole = yes
	needsfile = yes

[commit]
	verbose = true
