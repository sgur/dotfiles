
# ==== Conventional Commits 1.0.0 ==== {{{
# The commit message should be structured as follows:
#```
# <type>[optional scope]: <description>
#
# [optional body]
#
# [optional footer(s)]
#```
# The commit contains the following structural elements, to communicate intent to the consumers of
# your library:
#
# - fix: a commit of the type fix patches a bug in your codebase (this correlates with PATCH in
#     Semantic Versioning).
# - feat: a commit of the type feat introduces a new feature to the codebase (this correlates with
#     MINOR in Semantic Versioning).
# - BREAKING CHANGE: a commit that has a footer BREAKING CHANGE:, or appends a ! after the
#     type/scope, introduces a breaking API change (correlating with MAJOR in Semantic Versioning).
#     A BREAKING CHANGE can be part of commits of any type.
# - types other than fix: and feat: are allowed, for example @commitlint/config-conventional (based
#     on the Angular convention) recommends build:, chore:, ci:, docs:, style:, refactor:, perf:,
#     test:, and others.
# - footers other than BREAKING CHANGE: <description> may be provided and follow a convention
#     similar to git trailer format.
#
# https://www.conventionalcommits.org/en/v1.0.0/ }}}

# ==== The Seven Rules ==== {{{
# 1. Separate subject from body with a blank line
# 2. Limit the subject line to 50 characters
# 3. Capitalize the subject line
# 4. Do not end the subject line with a period
# 5. Use the imperative mood in the subject line
# 6. Wrap the body at 72 characters
# 7. Use the body to explain what and why vs. how
#
# How to Write a Git Commit Message http://chris.beams.io/posts/git-commit/ }}}
