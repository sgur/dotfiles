# Suspend and Resume
define-command suspend -docstring 'suspend: backgrounds current kakoune client.' %{
    evaluate-commands %sh{
        platform=$(uname -s)
        case $platform in
            Darwin)
                kill_cmd="/bin/kill"
                break
                ;;
            Linux)
                kill_cmd="/usr/bin/kill"
                break
                ;;
        esac
        # Send kakoune client to the background
        $kill_cmd -SIGTSTP $kak_client_pid
    }
}
map global user -docstring 'suspend kakoune job' z ':suspend<ret>'

# https://phaazon.net/blog/more-hindsight-vim-helix-kakoune
define-command -hidden open_buffer_picker %{
    prompt buffer: -menu -buffer-completion %{
        buffer %val{text}
    }
}
map global user -docstring 'open buffer picker' b ':open_buffer_picker<ret>'

define-command -hidden open_file_picker %{
    prompt file: -menu -shell-script-candidates 'fd --type=file' %{
        edit -existing %val{text}
    }
}
map global user -docstring 'open file picker' f ':open_file_picker<ret>'

map global normal '#' :comment-line<ret>
map global normal '^' :comment-block<ret>

# ui
set-option global ui_options terminal_assistant=none terminal_enable_mouse=false

# modeline format
declare-option -docstring "name of the git branch holding the current buffer" \
    str modeline_git_branch

hook global WinCreate .* %{
    hook window NormalIdle .* %{ evaluate-commands %sh{
        branch=$(cd "$(dirname "${kak_buffile}")" && git rev-parse --abbrev-ref HEAD 2>/dev/null)
        if [ -n "${branch}" ]; then
            printf 'set window modeline_git_branch %%{%s}' "[${branch}]"
        fi
    } }
}
set-option global modelinefmt '%val{bufname} %opt{modeline_git_branch}[%opt{filetype}] %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} - %val{client}@[%val{session}]'

# highlight
add-highlighter global/ wrap -word
add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces -lf '⏎' -spc ' ' -tab '→' -nbsp '⍽' -tabpad '·'

# rc/detection/editorconfig
# make sure to install editorconfig cli (ex. brew)
hook global BufOpenFile .* %{ editorconfig-load }
hook global BufNewFile .* %{ editorconfig-load }

# rc/detection/modeline
hook global BufOpenFile .* %{ modeline-parse }

# rc/tools/grep
set-option global grepcmd 'rg --color=never --vimgrep'

# rc/tools/lint, rt/tools/format
hook global WinSetOption filetype=css %{
    set-option window lintcmd "npx --yes stylelint --formatter unix --stdin-filename='%val{buffile}'"
    set-option buffer formatcmd "npx --yes prettier --stdin-filepath=%val{buffile}"
}

hook global WinSetOption filetype=javascript %{
    set-option window lintcmd 'run() { cat "$1" |npx --yes eslint -f unix --stdin --stdin-filename "$kak_buffile";} && run'
    set-option buffer formatcmd "npx --yes prettier --stdin-filepath=%val{buffile}"
}

hook global WinSetOption filetype=json %{
    set-option window lintcmd %{ run() { cat -- "$1" | jq 2>&1 | awk -v filename="$1" '/ at line [0-9]+, column [0-9]+$/ { line=$(NF - 2); column=$NF; sub(/ at line [0-9]+, column [0-9]+$/, ""); printf "%s:%d:%d: error: %s", filename, line, column, $0; }'; } && run }
    set-option buffer formatcmd "npx --yes prettier --stdin-filepath=%val{buffile}"
}

hook global WinSetOption filetype=markdown %{
    set-option buffer formatcmd "npx --yes prettier --stdin-filepath=%val{buffile}"
}

hook global WinSetOption filetype=python %{
    set-option window lintcmd "mypy --show-column-numbers"
    set-option buffer formatcmd 'black -'
}

hook global BufSetOption filetype=rust %{
    set-option buffer formatcmd 'rustfmt'
}

hook global WinSetOption filetype=sh %{
    set-option window lintcmd "shellcheck -fgcc -Cnever"
    set-option buffer formatcmd "shfmt"
}

hook global WinSetOption filetype=yaml %{
    # set-option window lintcmd "yamllint -f parsble"
    set-option window lintcmd %{
        run() {
           # change [message-type] to message-type:
           yamllint -f parsable "$1" | sed 's/ \[\(.*\)\] / \1: /'
        } && run
    }
    set-option buffer formatcmd "npx --yes prettier --stdin-filepath=%val{buffile}"
}

# rc/tools/spell
set-option global spell_lang "en"

# bundle (installed via chezmoi)
source "%val{config}/bundle/kak-bundle/rc/kak-bundle.kak"

# bundle/auto-pairs
bundle auto-pairs.kak https://github.com/alexherbo2/auto-pairs.kak %{
    enable-auto-pairs
}

# bundle/catppuccin
bundle-noload catppuccin 'git clone https://github.com/catppuccin/kakoune catppuccin' %{
    try %{
        colorscheme catppuccin_mocha
    }
}
bundle-install-hook catppuccin %{
    mkdir -p ${kak_config}/colors
    ln -sfn "${kak_opt_bundle_path}/catppuccin/colors" "${kak_config}/colors/catppuccin"
}

# bundle/kakoune-lsp
bundle kakoune-lsp https://github.com/kakoune-lsp/kakoune-lsp %{
    # eval %sh{kak-lsp --kakoune --session $kak_session}
    set global lsp_cmd "kak-lsp -s %val{session} -vvv --log ~/.cache/kak-lsp/kak-lsp.log"

    set-option global lsp_hover_anchor true
    set-option global lsp_auto_show_code_actions true
    set-option global lsp_diagnostic_line_error_sign 'E'
    set-option global lsp_diagnostic_line_warning_sign 'W'
    set-option global lsp_diagnostic_line_hint_sign 'H'
    set-option global lsp_diagnostic_line_info_sign 'I'

    lsp-enable
    lsp-auto-hover-enable
    lsp-inlay-hints-enable global
    lsp-inlay-diagnostics-enable global

    map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
    map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
    map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
    map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
    map global object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
    map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
    map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
    map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

    hook global KakEnd .* lsp-exit
}

# bundle/kak-tree-sitter
bundle-customload kak-tree-sitter https://git.sr.ht/~hadronized/kak-tree-sitter %{
    eval %sh{ kak-tree-sitter --kakoune --daemonize --server --init $kak_session }
}
bundle-install-hook kak-tree-sitter %{
    (
        cd kak-tree-sitter
        cargo install --locked --force --path .
    )
    (
        cd ktsctl
        cargo install --locked --force --path .
    )
    # fetch -> compile -> install: KDL syntax
    ktsctl sync kdl
    ktsctl sync sshclientconfig
    ktsctl sync gotmpl
}
