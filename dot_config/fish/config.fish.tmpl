{{ if and (lookPath "gpg") (lookPath "gpgconf") -}}
if type -q gpg
    set -gx GPG_TTY (tty)
    gpg-connect-agent --quiet updatestartuptty /bye >/dev/null &
    set -gx SSH_AUTH_SOCK (gpgconf --list-dirs agent-ssh-socket)
    commandline -f repaint
end
{{- end }}

if status is-interactive
    # vscode の integrated terminal からは vscode のエディターを開く
    if test "$TERM_PROGRAM" = vscode
        set -gx EDITOR 'code -w'
    end

    set -l os (uname -s)
    # Linux
    # Darwin
    set -l arch (uname -m)
    # x86_64
    # arm64

    if test $os = Darwin
        function rm --wraps 'rm' --description 'rm with -i option by default'
            command rm -i $argv
        end
    else
        function rm --wraps 'rm' --description 'rm with --interactive option by default'
            command rm --interactive=once $argv
        end
    end
    function cp --wraps='cp' --description 'cp with -i option by default'
        command cp -i $argv
    end
    function mv --wraps='mv' --description 'mv with -i option by default'
        command mv -i $argv
    end

    # gazorby/fish-abbreviation-tip が conf.d のロード中に初期化されるので
    # config.fish 内で abbr を設定する
    abbr --add curl /usr/bin/curl
    abbr --add ipecho -- /usr/bin/curl --silent ipecho.net/plain

    abbr --add za zellij attach
    abbr --add za-c -- zellij attach --create
    abbr --add zl zellij list-sessions

    abbr --add chz -- chezmoi

    abbr --add CC --position anywhere --set-cursor "% | fish_clipboard_copy"
    abbr --add aws.e --set-cursor "aws-vault exec % -- "
    abbr --add aws.l --set-cursor "aws-vault login % --stdout | fish_clipboard_copy"

    abbr --add hostname uname -n

    abbr --add plantuml-server docker container run --detach --publish 9999:8080 --name plantuml-server --restart=always plantuml/plantuml-server:jetty
    abbr --add --set-cursor sws docker run --rm -it -p 8787:80 -v %:/public joseluisq/static-web-server:2
    # abbr 用の外部 gist を読み込む
    if type -q "ghq"
        set -l abbr_gist_path (ghq list -p 9e80be22552dda4613d7833273f6bc59 |string trim)
        if test -n "$abbr_gist_path"
            source $abbr_gist_path/*_abbr.fish
        end
    end

    abbr --add nr ni run
    abbr --add na ni add
    abbr --add nrm ni remove

    # \el -> \ei へ移設
    bind --user \ei __fish_list_current_token
end

emit fish_ready

# 共通の設定はログインシェルでのみ行う
status is-login || exit

{{ $homeDir := .chezmoi.homeDir -}}
{{ range (list ".yarn/bin" ".cargo/bin" ".dotnet/tools") -}}
{{   $path := joinPath $homeDir . -}}
{{   if get (stat $path) "isDir" -}}
fish_add_path {{ $path }}
{{   end -}}
{{ end -}}
fish_add_path ~/bin ~/.local/bin

# meaningful-ooo/sponge
set sponge_purge_only_on_exit true
set sponge_delay 5

set -gx EDITOR vim
# git commit では copilot を使いたいので vim を利用する
set -gx GIT_EDITOR vim
if type -q hx
    set -gx EDITOR hx
end

{{ if eq .chezmoi.os "darwin" -}}
if test "$TERM" = "screen-256color"
    set -gx TERM xterm-256color
end
{{- end }}

set -gx LANG ja_JP.UTF-8

set -gx PIPENV_VENV_IN_PROJECT 1

set -gx LESS --incsearch --quit-if-one-screen --raw-control-chars

{{ if .wsl -}}
set -gx fish_help_browser (which xdg-open)
{{- end }}

fish_config theme choose 'Catppuccin Mocha'

set -gx HGREP_DEFAULT_OPTS --theme Nord

set -gx RIPGREP_CONFIG_PATH ~/.config/ripgrep/ripgreprc
